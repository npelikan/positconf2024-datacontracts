---
title: "An Example Literate Data Contract"
format: html
---

# Penguins Table Contract

## Purpose 

We maintain a data table about penguins to support our biodiversity research, particularly in understanding the ecological roles and adaptations of different penguin species. This data allows us to make informed decisions on conservation efforts and assess the impact of climate change on marine ecosystems. By analyzing and comparing data across species, we can develop sustainable tourism and wildlife protection strategies. It also provides crucial insights for conducting environmental impact assessments, especially for our operations near penguin habitats. Overall, this data is essential for guiding our commitment to responsible business practices and environmental stewardship.

## Key Personnel

 - **Responsible:** Danielle Dataengineer (danielle.dataengineer@notional.company)
 - **Owner:** Danielle Dataengineer (danielle.dataengineer@notional.company)
 - **Data Users:**
  - Bill Businessanalyst (bill.businessanalyst@notional.company)
  - Derek Datascientist (derek.datascientist@notional.company)
  - Monika Mlengineer (monika.mlengineer@notional.company)

## Data Interface

This data is stored as a csv table in S3. Storing this data in S3 ensures scalability and durability, allowing us to securely manage large volumes of penguin data as our research expands. Additionally, S3’s integration with analytical tools enables seamless access and processing, which is vital for our ongoing research and decision-making processes.

## SLA

No SLA is expected on this data, as it will be updated periodically as new results come in. 

```{r setup, include=FALSE}
library(pointblank)

agent <-
  create_agent(
    tbl = ~ palmerpenguins::penguins,
    actions = action_levels(
      warn_at = 0.05,
      stop_at = 0.10
    ),
    tbl_name = "palmerpenguins::penguins",
    label = "Validation plan generated by `draft_validation()`."
  ) 
```

## Data Schema

We're only studying penguins in the South Atlantic, so we only expect to see Adelie, Chinstrap and Gentoo penguins.

```{r} 
agent <- agent |>
  # Expect that column `species` is of type: factor
  col_is_factor(
    columns = c("species")
  ) |>
  col_vals_in_set(
    columns = c("species"),
    set = c("Adelie", "Chinstrap", "Gentoo")
  )
```

The island column must always be a factor.

```{r} 
agent <- agent |>
  # Expect that column `island` is of type: factor
  col_is_factor(
    columns = c("island")
  ) |>
  col_vals_in_set(
    columns = c("island"),
    set = c("Biscoe", "Dream", "Torgersen")
  )
```

Bill length must be numeric. We set expectations on the value to flag anomalous measurements.

```{r} 
agent <- agent |>
  # Expect that column `bill_length_mm` is of type: numeric
  col_is_numeric(
    columns = c("bill_length_mm")
  ) |>
  # Expect that values in `bill_length_mm` should be between `32.1` and `59.6`
  col_vals_between(
    columns = c("bill_length_mm"),
    left = 32.1,
    right = 59.6,
    na_pass = TRUE
  ) 
```

Bill depth must be numeric. We set expectations on the value to flag anomalous measurements.

```{r}
agent <- agent |>
  # Expect that column `bill_depth_mm` is of type: numeric
  col_is_numeric(
    columns = c("bill_depth_mm")
  ) |>
  # Expect that values in `bill_depth_mm` should be between `13.1` and `21.5`
  col_vals_between(
    columns = c("bill_depth_mm"),
    left = 13.1,
    right = 21.5,
    na_pass = TRUE
  ) 
```

Flipper length must be numeric. We set expectations on the value to flag anomalous measurements.

```{r}
agent <- agent |>
  # Expect that column `flipper_length_mm` is of type: integer
  col_is_integer(
    columns = c("flipper_length_mm")
  ) |>
  # Expect that values in `flipper_length_mm` should be between `172` and `231`
  col_vals_between(
    columns = c("flipper_length_mm"),
    left = 172,
    right = 231,
    na_pass = TRUE
  ) 
```

Evaluate remaining schema:

```{r}
agent <- agent |>
  # Expect that column `body_mass_g` is of type: integer
  col_is_integer(
    columns = c("body_mass_g")
  ) |>
  # Expect that column `sex` is of type: factor
  col_is_factor(
    columns = c("sex")
  ) |>
  # Expect that column `year` is of type: integer
  col_is_integer(
    columns = c("year")
  ) |>
  # Expect entirely distinct rows across `species, island, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, sex, year`
  rows_distinct(
    columns = c("species, island, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, sex, year")
  ) |>
  # Expect that column schemas match
  col_schema_match(
    schema = col_schema(
      species = "factor",
      island = "factor",
      bill_length_mm = "numeric",
      bill_depth_mm = "numeric",
      flipper_length_mm = "integer",
      body_mass_g = "integer",
      sex = "factor",
      year = "integer"
    )
  ) |>
  interrogate()
```


```{r print_agent, echo=FALSE}
x_list <- agent |> get_agent_x_list()

agent |> get_agent_report()
```


## Notify people

 In this section you can add notifications to make sure the right people are warned about data quality escapes. Conditional emails or slack alerts are great!



## Save Validation
```{r write_results}
library(pins)
library(lubridate)

board <- board_connect()

pin_name <- "nick.pelikan@posit.co/penguins_contract"

current_run_output <- list(
  # Save a boolean if there are any stop-level data quality issues
  any_stops = any(x_list$stop),
  # Save a boolean if there are any warning-level data quality issues
  any_warnings = any(x_list$warn),
  # Save the agent
  agent = agent
)

pin_write(board, current_run_output, pin_name, force_identical_write = TRUE)

```
